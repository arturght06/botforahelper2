from keyboard import greet_key, brcs_key
from aiogram import Dispatcher, types
from create_bot import dp, bot
from database import sqlitedb
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from reqdata import req
from database import sqlitedb

class FSMaddnum(StatesGroup):
    that = State()


# @dp.message_handler(commands=['start'])
async def start_add_number(message):
    await FSMaddnum.that.set()
    with open('settings.png', 'rb') as photo:
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
    await bot.send_message(chat_id=message.from_user.id, text='–ß—Ç–æ-–±—ã –¥–æ–±–∞–≤–∏—Ç—å - –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤—å access-token\n–í–∑—è—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç–∞–∫:\n–ó–∞–π–¥–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –§–æ—Ä—ã –≤ Chrome, –Ω–∞–∂–º–∏ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º–∏—à–∏ -> –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥ -> –æ—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É Network -> –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É -> –ø—Ä–æ—Å–º–æ—Ç—Ä–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∞ –∏ –Ω–∞–∫–æ–Ω–µ—Ü —Å–∫–æ–ø–∏—Ä—É–π –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π access-token, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ', reply_markup=brcs_key)
    # await message.reply(f'{str(message.from_user.id)}\n–ü—Ä–∏–≤–µ—ÇüëãüèΩ\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ \"Fora\"–ü–°–°...  –∫–Ω–æ–ø–∫–∞ —É–∂–µ –≤–Ω–∏–∑—Éüëá' , reply_markup=greet_key)


async def add_number_in_db(message):
    acstkn = str(message.text)
    userid = str(message.from_user.id)
    # info_number = req(acstkn)

    a = await sqlitedb.sql_add_number(userid, acstkn)
    print(str(a))
    if a == 'FalseNumber' or a == False:
        await message.reply('–¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª')
        return
    else:
        await message.reply('–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
        return

    # if info_number == False:
    #     await message.reply(req(acstkn))
    # else:
        



async def back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=greet_key)


def register_handlers_add_numbers(dp: Dispatcher):
    dp.register_message_handler(back, state='*', commands=['–û—Ç–º–µ–Ω–∞', 'back'])
    dp.register_message_handler(back, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(start_add_number, text = ['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'])
    dp.register_message_handler(add_number_in_db, state=FSMaddnum.that)

    # dp.register_message_handler(echo)